AWSTemplateFormatVersion: '2010-09-09'
Description: Full Task Management System with Cognito, CRUD, Status, Deadline, and Notifications

Resources:
  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: TaskUserPool
      AutoVerifiedAttributes: [email]
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: true
          RequireNumbers: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: TaskAppClient
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
      CallbackURLs:
        - https://localhost:3000
      LogoutURLs:
        - https://localhost:3000
      SupportedIdentityProviders:
        - COGNITO

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: TaskIdentityPool
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName

  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthRole.Arn

  CognitoAuthRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CognitoAuthRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref IdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: authenticated
      Policies:
        - PolicyName: AllowLambdaInvoke
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: '*'  # You can restrict to specific Lambda ARNs for security

  # Cognito Groups
  AdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Admins
      UserPoolId: !Ref UserPool
      Description: Admin users who can create and assign tasks
      Precedence: 1

  MemberGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Members
      UserPoolId: !Ref UserPool
      Description: Regular team members who receive tasks
      Precedence: 2

  # DynamoDB Table
  TaskTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: TaskTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # SNS Topic for notifications
  TaskSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: TaskNotifications

  TaskTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref TaskSNSTopic
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 'sns:Publish'
            Resource: !Ref TaskSNSTopic

  # Lambda Execution Role
  TaskLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: TaskLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: !GetAtt TaskTable.Arn
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref TaskSNSTopic
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'

  # Lambda Functions with inline code
  CreateTaskFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CreateTask
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt TaskLambdaRole.Arn
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref TaskSNSTopic
      Code:
        ZipFile: |
          const AWS = require("aws-sdk");
          const { v4: uuidv4 } = require("uuid");
          const db = new AWS.DynamoDB.DocumentClient();
          const sns = new AWS.SNS();
          exports.handler = async (event) => {
            const claims = event.requestContext.authorizer.claims;
            const groups = claims['cognito:groups'] || '';
            if (!groups.includes("Admins")) {
              return { statusCode: 403, body: JSON.stringify({ message: "Not authorized" }) };
            }
            const body = JSON.parse(event.body);
            const task = {
              id: uuidv4(),
              title: body.title,
              description: body.description,
              assignedTo: body.assignedTo,
              status: "Pending",
              deadline: body.deadline,
              createdAt: new Date().toISOString()
            };
            await db.put({ TableName: "TaskTable", Item: task }).promise();
            await sns.publish({
              TopicArn: process.env.SNS_TOPIC_ARN,
              Message: `New task '${task.title}' assigned to ${task.assignedTo}`,
              Subject: "New Task Assigned"
            }).promise();
            return { statusCode: 201, body: JSON.stringify(task) };
          };

  GetTasksFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GetTasks
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt TaskLambdaRole.Arn
      Code:
        ZipFile: |
          const AWS = require("aws-sdk");
          const db = new AWS.DynamoDB.DocumentClient();
          exports.handler = async (event) => {
            const user = event.requestContext.authorizer.claims.email;
            const result = await db.scan({ TableName: "TaskTable" }).promise();
            const tasks = result.Items.filter(task => task.assignedTo === user);
            return { statusCode: 200, body: JSON.stringify(tasks) };
          };

  UpdateTaskFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: UpdateTask
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt TaskLambdaRole.Arn
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref TaskSNSTopic
      Code:
        ZipFile: |
          const AWS = require("aws-sdk");
          const db = new AWS.DynamoDB.DocumentClient();
          const sns = new AWS.SNS();
          exports.handler = async (event) => {
            const { id, status } = JSON.parse(event.body);
            await db.update({
              TableName: "TaskTable",
              Key: { id },
              UpdateExpression: "set #s = :s",
              ExpressionAttributeNames: { "#s": "status" },
              ExpressionAttributeValues: { ":s": status }
            }).promise();
            await sns.publish({
              TopicArn: process.env.SNS_TOPIC_ARN,
              Message: `Task ${id} updated to status: ${status}`,
              Subject: "Task Status Updated"
            }).promise();
            return { statusCode: 200, body: JSON.stringify({ id, status }) };
          };

  DeleteTaskFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: DeleteTask
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt TaskLambdaRole.Arn
      Code:
        ZipFile: |
          const AWS = require("aws-sdk");
          const db = new AWS.DynamoDB.DocumentClient();
          exports.handler = async (event) => {
            const { id } = JSON.parse(event.body);
            await db.delete({ TableName: "TaskTable", Key: { id } }).promise();
            return { statusCode: 200, body: JSON.stringify({ deleted: id }) };
          };

  # Lambda Permissions for API Gateway
  LambdaInvokePermissionCreateTask:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CreateTaskFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/POST/tasks

  LambdaInvokePermissionGetTasks:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetTasksFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/GET/tasks

  LambdaInvokePermissionUpdateTask:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UpdateTaskFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/PATCH/tasks

  LambdaInvokePermissionDeleteTask:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DeleteTaskFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/DELETE/tasks

  # API Gateway Rest API
  TaskApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: TaskApi

  TaskResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt TaskApi.RootResourceId
      PathPart: tasks
      RestApiId: !Ref TaskApi

  CognitoAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CognitoAuthorizer
      Type: COGNITO_USER_POOLS
      RestApiId: !Ref TaskApi
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
        - !GetAtt UserPool.Arn

  CreateTaskMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      ResourceId: !Ref TaskResource
      RestApiId: !Ref TaskApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateTaskFunction.Arn}/invocations

  GetTaskMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      ResourceId: !Ref TaskResource
      RestApiId: !Ref TaskApi
      Integration:
        IntegrationHttpMethod: POST   # AWS_PROXY requires POST for Lambda proxy integration
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTasksFunction.Arn}/invocations

  UpdateTaskMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: PATCH
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      ResourceId: !Ref TaskResource
      RestApiId: !Ref TaskApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateTaskFunction.Arn}/invocations

  DeleteTaskMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: DELETE
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      ResourceId: !Ref TaskResource
      RestApiId: !Ref TaskApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteTaskFunction.Arn}/invocations

  # Deployment and Stage for API Gateway
  TaskApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - CreateTaskMethod
      - GetTaskMethod
      - UpdateTaskMethod
      - DeleteTaskMethod
    Properties:
      RestApiId: !Ref TaskApi
      StageName: Prod

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${TaskApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/tasks"
  UserPoolId:
    Description: "Cognito User Pool Id"
    Value: !Ref UserPool
  UserPoolClientId:
    Description: "Cognito User Pool Client Id"
    Value: !Ref UserPoolClient
  IdentityPoolId:
    Description: "Cognito Identity Pool Id"
    Value: !Ref IdentityPool
